Resources:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: demo-igw
  DemoVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: App VPC
  AttachInternetGategayToVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref DemoVpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DemoVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        !Select
          - 0
          - !GetAZs
      Tags:
        - Key: Name
          Value: Pulic Subnet 1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref DemoVpc
      AvailabilityZone:
        !Select
          - 1
          - !GetAZs
      Tags:
        - Key: Name
          Value: Pulic Subnet 2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref DemoVpc
      AvailabilityZone:
        !Select
          - 0
          - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet 1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref DemoVpc
      AvailabilityZone:
        !Select
          - 1
          - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet 2
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.5.0/24
      VpcId: !Ref DemoVpc
      AvailabilityZone:
        !Select
          - 0
          - !GetAZs
      Tags:
        - Key: Name
          Value: DB Subnet 1
  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.6.0/24
      VpcId: !Ref DemoVpc
      AvailabilityZone:
        !Select
          - 1
          - !GetAZs
      Tags:
        - Key: Name
          Value: DB Subnet 2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVpc
      Tags:
        - Key: Name
          Value: Public Demo Route
  RouteTraficToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  AssociatePublic1ToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  AssociatePublic2ToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  AppRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVpc
      Tags:
        - Key: Name
          Value: App Demo Route
  AssociateAppSubnet1ToAppRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AppRouteTable
      SubnetId: !Ref PrivateSubnet1
  AssociateAppSubnet2ToAppRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AppRouteTable
      SubnetId: !Ref PrivateSubnet2
  DBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVpc
      Tags:
        - Key: Name
          Value: Database Demo Route
  AssociateDBsubnet1ToDbRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable
      SubnetId: !Ref DBSubnet1
  AssociateDBsubnet2ToDbRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable
      SubnetId: !Ref DBSubnet2
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elastic Load Balance for Demo app open port 80 to the internent.
      GroupName: elb-sg
      VpcId: !Ref DemoVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Demo app open port 80 to ELBSecurityGroup.
      GroupName: app-sg
      VpcId: !Ref DemoVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database SecurityGroup for Demo app open port 80 to ELBSecurityGroup.
      GroupName: database-sg
      VpcId: !Ref DemoVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup
  DemoElasticLoadBalance:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: demo-elb
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  DemoTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: DemoGroup
      VpcId: !Ref DemoVpc
      HealthCheckEnabled: true
      HealthCheckPath: /health.html
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      TargetType: instance
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref DemoElasticLoadBalance
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DemoTargetGroup
  DemoECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: DemoCluster

